traits:
  JDK: true
  Leiningen 2: true
  S3-Cache: true
  npm: true

scripts:
  prepare-shared-ui:
    exclusive_executor_resource: build-leihs-ui
    environment_variables:
      RUBY: '{{RUBY_ENGINE}}-{{RUBY_VERSION}}'
      RUBY_ENGINE: ruby
      RUBY_VERSION: 2.6.0
    body: |
      #!/usr/bin/env bash
      set -euxo

      WORK_DIR="$LEIHS_MY_DIR"

      ARTEFACT_NAME="leihs-ui"
      DIGEST="$(cd "$WORK_DIR/leihs-ui" && git log -n 1 HEAD --pretty=%T)"

      ARTEFACT_DIR="./leihs-ui/dist"                              # path of artefact *relative to* working dir
      LOCAL_CACHED_ARTEFACT="/tmp/${ARTEFACT_NAME}_${DIGEST}.tgz" # path of locally cached artefact
      S3_CACHED_ARTEFACT="${ARTEFACT_NAME}_${DIGEST}.tgz"         # name of the artefact in the S3 Bucket

      export PATH=~/.rubies/$RUBY/bin:$PATH # the s3-cache-helper needs this

      cd "$WORK_DIR"

      # check if already locally cached
      if [ -e $LOCAL_CACHED_ARTEFACT ]; then
          echo "INFO: locally cached artefact found; extracting and exiting"
          tar -xvz -f "$LOCAL_CACHED_ARTEFACT"
          exit 0
      # try to download from global cache
      else
        s3-cache-helper download -n "$S3_CACHED_ARTEFACT" -p "$LOCAL_CACHED_ARTEFACT"
        # build the artefact if it was not downloaded
        if [ ! -f ${LOCAL_CACHED_ARTEFACT} ]; then
          ./scripts/prepare-shared-ui.sh
          tar -cvz -f "$LOCAL_CACHED_ARTEFACT" "$ARTEFACT_DIR"
          s3-cache-helper upload -n "$S3_CACHED_ARTEFACT" -p "$LOCAL_CACHED_ARTEFACT"
        fi
        # extract the either downloaded or build artefact
        tar -xvz -f "$LOCAL_CACHED_ARTEFACT"
      fi

  build-my-uberjar:
    timeout: 10 minutes
    exclusive_executor_resource: build-leihs-my-jar
    environment_variables:
      RUBY: '{{RUBY_ENGINE}}-{{RUBY_VERSION}}'
      RUBY_ENGINE: ruby
      RUBY_VERSION: 2.6.0
    start_when:
      shared ui was built:
        script_key: prepare-shared-ui
    body: |
      #!/usr/bin/env bash
      set -euxo

      # custom stuff for this project
      #
      export PROJECT_DIR="$LEIHS_MY_DIR"
      export UBERJAR_NAME="leihs-my"

      function build_uberjar() {
        echo "INFO: building the ${UBERJAR_NAME} uberjar now"
        export LEIN_SNAPSHOTS_IN_RELEASE=yes
        cd $PROJECT_DIR
        lein uberjar
      }

      # the reminder should be pretty much the same for all our projects resulting in an uberjar

      cd $PROJECT_DIR
      mkdir -p $PROJECT_DIR/target
      DIGEST=$(git log -n 1 HEAD --pretty=%T)

      UBERJAR_PATH=/tmp/${UBERJAR_NAME}_${DIGEST}.jar # path of locally cached uberjar
      LEIN_UBERJAR_PATH="${PROJECT_DIR}/target/${UBERJAR_NAME}.jar" # path of the expeced repository uberjar path
      S3_UBERJAR_FILE_NAME="${UBERJAR_NAME}_${DIGEST}.jar" # name of the uberjar in the S3 Bucket

      export PATH=~/.rubies/$RUBY/bin:$PATH # the s3-chache-helper needs this

      if [ -e $UBERJAR_PATH ]; then
          echo "INFO: locally cached uberjar found; linking and exiting"
          ln -s "$UBERJAR_PATH" "$LEIN_UBERJAR_PATH"
          exit 0
      else
        s3-cache-helper download -n "$S3_UBERJAR_FILE_NAME" -p "$UBERJAR_PATH"
        # build the uberjar if it was not downloaded
        if [ ! -f ${UBERJAR_PATH} ]; then
          build_uberjar
          mv "$LEIN_UBERJAR_PATH" "$UBERJAR_PATH"
          s3-cache-helper upload -n "$S3_UBERJAR_FILE_NAME" -p "$UBERJAR_PATH"
        fi
        # link the either downloaded or build uberjar
        ln -s "$UBERJAR_PATH" "$LEIN_UBERJAR_PATH"
      fi
